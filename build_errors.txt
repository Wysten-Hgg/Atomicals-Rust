warning: unused manifest key: profile.release.wasm-opt
    Updating crates.io index
     Locking 5 packages to latest compatible versions
      Adding ciborium v0.2.2
      Adding ciborium-io v0.2.2
      Adding ciborium-ll v0.2.2
      Adding crunchy v0.2.3
      Adding half v2.4.1
    Checking half v2.4.1
    Checking ciborium-io v0.2.2
    Checking ciborium-ll v0.2.2
    Checking ciborium v0.2.2
    Checking atomicals-rs v0.1.0 (/mnt/d/atom/atomicalsR)
warning: unused import: `bitcoin::transaction::Version`
 --> src/operations/mining.rs:5:5
  |
5 | use bitcoin::transaction::Version;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `serde_json::json`
  --> src/operations/mining.rs:16:5
   |
16 | use serde_json::json;
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `Arc20Token`
 --> src/operations/mint_ft.rs:1:54
  |
1 | use crate::types::{AtomicalsTx, arc20::{Arc20Config, Arc20Token}};
  |                                                      ^^^^^^^^^^

warning: unused imports: `MintConfig` and `MintResult`
 --> src/operations/mint_ft.rs:2:39
  |
2 | use crate::types::mint::{BitworkInfo, MintConfig, MintResult};
  |                                       ^^^^^^^^^^  ^^^^^^^^^^

warning: unused import: `TapTree`
  --> src/operations/mint_ft.rs:10:47
   |
10 |     psbt::Psbt, ScriptBuf, Address, taproot::{TapTree, TaprootBuilder, LeafVersion},
   |                                               ^^^^^^^

warning: unused import: `wasm_bindgen::prelude::*`
  --> src/operations/mint_ft.rs:15:5
   |
15 | use wasm_bindgen::prelude::*;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `serde_cbor`
  --> src/operations/mint_ft.rs:17:5
   |
17 | use serde_cbor;
   |     ^^^^^^^^^^

warning: unused import: `bitcoin::Script`
 --> src/types/atomicals.rs:3:5
  |
3 | use bitcoin::Script;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `bitcoin::Transaction`
  --> src/types/mod.rs:15:5
   |
15 | use bitcoin::Transaction;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
  --> src/types/mod.rs:16:13
   |
16 | use serde::{Serialize, Deserialize};
   |             ^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Promise`
 --> src/wallet/web/unisat.rs:7:32
  |
7 | use js_sys::{Function, Object, Promise, Reflect, Array};
  |                                ^^^^^^^

warning: unused import: `Txid`
 --> src/wallet/web/wizz.rs:4:88
  |
4 | use bitcoin::{Transaction, TxOut, Network, PublicKey, Amount, OutPoint, Psbt, Address, Txid};
  |                                                                                        ^^^^

warning: unused imports: `Engine as _` and `engine::general_purpose::STANDARD as BASE64`
 --> src/wallet/web/wizz.rs:9:14
  |
9 | use base64::{Engine as _, engine::general_purpose::STANDARD as BASE64};
  |              ^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `console`
  --> src/wallet/web/wizz.rs:10:23
   |
10 | use web_sys::{window, console};
   |                       ^^^^^^^

warning: unused import: `crate::types::AtomicalsTx`
 --> src/wallet/mod.rs:7:5
  |
7 | use crate::types::AtomicalsTx;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `MintConfig`
 --> src/wasm/mod.rs:2:33
  |
2 | use crate::types::{Arc20Config, MintConfig};
  |                                 ^^^^^^^^^^

warning: unused import: `serde_json::Value`
 --> src/wasm/mod.rs:6:5
  |
6 | use serde_json::Value;
  |     ^^^^^^^^^^^^^^^^^

warning: private item shadows public glob re-export
  --> src/utils/mod.rs:1:21
   |
1  | use crate::errors::{Error, Result};
   |                     ^^^^^
   |
note: the name `Error` in the type namespace is supposed to be publicly re-exported here
  --> src/utils/mod.rs:11:9
   |
11 | pub use script::*;
   |         ^^^^^^^^^
note: but the private item here shadows it
  --> src/utils/mod.rs:1:21
   |
1  | use crate::errors::{Error, Result};
   |                     ^^^^^
   = note: `#[warn(hidden_glob_reexports)]` on by default

warning: private item shadows public glob re-export
  --> src/utils/mod.rs:1:28
   |
1  | use crate::errors::{Error, Result};
   |                            ^^^^^^
   |
note: the name `Result` in the type namespace is supposed to be publicly re-exported here
  --> src/utils/mod.rs:11:9
   |
11 | pub use script::*;
   |         ^^^^^^^^^
note: but the private item here shadows it
  --> src/utils/mod.rs:1:28
   |
1  | use crate::errors::{Error, Result};
   |                            ^^^^^^

warning: unused imports: `ScriptBuf`, `Transaction`, `TxIn`, and `TxOut`
 --> src/utils/tx_size.rs:1:15
  |
1 | use bitcoin::{Transaction, TxIn, TxOut, ScriptBuf};
  |               ^^^^^^^^^^^  ^^^^  ^^^^^  ^^^^^^^^^

warning: unused import: `log`
 --> src/utils/tx_size.rs:2:5
  |
2 | use log;
  |     ^^^

warning: unused imports: `Address`, `OP_RETURN`, `PrivateKey`, and `secp256k1::Keypair`
 --> src/utils/script.rs:3:39
  |
3 |         all::{OP_CHECKSIG, OP_ENDIF, OP_IF, OP_RETURN},
  |                                             ^^^^^^^^^
...
7 |     secp256k1::Keypair,
  |     ^^^^^^^^^^^^^^^^^^
8 |     Address, PrivateKey, Script, ScriptBuf, XOnlyPublicKey,
  |     ^^^^^^^  ^^^^^^^^^^

warning: unused variable: `tx`
   --> src/operations/mining.rs:254:9
    |
254 |     let tx = tx_wrapper.to_transaction()
    |         ^^ help: if this is intentional, prefix it with an underscore: `_tx`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `window`
   --> src/operations/mining.rs:308:17
    |
308 |             let window = window.clone();
    |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: use of deprecated associated function `bitcoin::ScriptBuf::new_v1_p2tr`: use new_p2tr instead
   --> src/operations/mint_ft.rs:117:32
    |
117 |     let tr_script = ScriptBuf::new_v1_p2tr(&secp, *child_node_xonly_pubkey, merkle_root.merkle_root());
    |                                ^^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: unused variable: `mining_opts`
   --> src/operations/mint_ft.rs:309:21
    |
309 |     if let Some(ref mining_opts) = mining_options {
    |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mining_opts`

warning: use of deprecated method `bitcoin::Script::is_v0_p2wpkh`: use is_p2wpkh instead
   --> src/utils/tx_size.rs:121:26
    |
121 |         } else if script.is_v0_p2wpkh() {
    |                          ^^^^^^^^^^^^

warning: use of deprecated method `bitcoin::Script::is_v1_p2tr`: use is_p2tr instead
   --> src/utils/tx_size.rs:123:26
    |
123 |         } else if script.is_v1_p2tr() {
    |                          ^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `utils::script::Error`
  --> src/utils/script.rs:70:37
   |
64 | pub fn cbor<T>(v: &T) -> Result<Vec<u8>>
   |                          --------------- expected `utils::script::Error` because of this
...
70 |     ciborium::into_writer(v, &mut cbor)?;
   |     -----------------------------------^ the trait `From<ciborium::ser::Error<std::io::Error>>` is not implemented for `utils::script::Error`, which is required by `std::result::Result<Vec<u8>, utils::script::Error>: FromResidual<std::result::Result<Infallible, ciborium::ser::Error<std::io::Error>>>`
   |     |
   |     this can't be annotated with `?` because it has type `Result<_, ciborium::ser::Error<std::io::Error>>`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the trait `FromResidual<std::result::Result<Infallible, E>>` is implemented for `std::result::Result<T, F>`
   = note: required for `std::result::Result<Vec<u8>, utils::script::Error>` to implement `FromResidual<std::result::Result<Infallible, ciborium::ser::Error<std::io::Error>>>`

warning: unused import: `Serialize`
  --> src/wallet/web/wizz.rs:12:26
   |
12 | use serde::{Deserialize, Serialize};
   |                          ^^^^^^^^^

warning: unused variable: `e`
   --> src/errors/mod.rs:126:13
    |
126 |     fn from(e: bitcoin::taproot::TaprootBuilder) -> Self {
    |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `worker_clone`
   --> src/operations/mining.rs:166:9
    |
166 |     let worker_clone = worker.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_worker_clone`

warning: unused variable: `e`
   --> src/operations/mining.rs:218:57
    |
218 |     let onerror_callback = Closure::wrap(Box::new(move |e: Event| {
    |                                                         ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: variable does not need to be mutable
   --> src/operations/mining.rs:227:9
    |
227 |     let mut task_obj = Object::new();
    |         ----^^^^^^^^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `script_type`
  --> src/operations/mint_ft.rs:67:13
   |
67 |         let script_type = ScriptType::from_script(&utxo.txout.script_pubkey)
   |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_script_type`

warning: unused variable: `promise`
   --> src/wallet/web/wizz.rs:165:27
    |
165 |                 if let Ok(promise) = JsFuture::from(connect_result.unchecked_into::<Promise>()).await {
    |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_promise`

warning: unused variable: `commit_psbt`
  --> src/wallet/mod.rs:40:49
   |
40 |     async fn sign_atomicals_transactions(&self, commit_psbt: Psbt, reveal_psbt: Psbt) -> Result<(Transaction, Transaction)> {
   |                                                 ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_commit_psbt`

warning: unused variable: `reveal_psbt`
  --> src/wallet/mod.rs:40:68
   |
40 |     async fn sign_atomicals_transactions(&self, commit_psbt: Psbt, reveal_psbt: Psbt) -> Result<(Transaction, Transaction)> {
   |                                                                    ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_reveal_psbt`

For more information about this error, try `rustc --explain E0277`.
warning: `atomicals-rs` (lib) generated 37 warnings
error: could not compile `atomicals-rs` (lib) due to 1 previous error; 37 warnings emitted
